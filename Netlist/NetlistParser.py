# Generated from Netlist.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,125,1144,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,1,
        0,1,0,4,0,186,8,0,11,0,12,0,187,1,0,1,0,1,0,4,0,193,8,0,11,0,12,
        0,194,3,0,197,8,0,1,1,1,1,1,1,1,1,3,1,203,8,1,1,2,1,2,1,2,3,2,208,
        8,2,1,3,1,3,1,3,4,3,213,8,3,11,3,12,3,214,1,3,1,3,1,3,1,3,1,3,1,
        3,3,3,223,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,3,3,243,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,5,5,255,8,5,10,5,12,5,258,9,5,1,6,1,6,3,6,262,8,6,1,6,
        1,6,1,6,1,7,1,7,3,7,269,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,277,8,7,
        1,7,1,7,3,7,281,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,289,8,7,1,7,1,7,
        1,7,1,7,1,7,5,7,296,8,7,10,7,12,7,299,9,7,1,8,1,8,1,8,5,8,304,8,
        8,10,8,12,8,307,9,8,1,9,5,9,310,8,9,10,9,12,9,313,9,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,326,8,9,1,10,1,10,1,11,3,11,
        331,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,340,8,11,1,12,1,
        12,1,12,5,12,345,8,12,10,12,12,12,348,9,12,1,13,1,13,1,13,5,13,353,
        8,13,10,13,12,13,356,9,13,1,14,1,14,1,14,5,14,361,8,14,10,14,12,
        14,364,9,14,1,15,1,15,1,15,5,15,369,8,15,10,15,12,15,372,9,15,1,
        16,1,16,1,16,5,16,377,8,16,10,16,12,16,380,9,16,1,17,1,17,1,17,5,
        17,385,8,17,10,17,12,17,388,9,17,1,18,1,18,1,18,5,18,393,8,18,10,
        18,12,18,396,9,18,1,19,1,19,1,19,5,19,401,8,19,10,19,12,19,404,9,
        19,1,20,1,20,1,20,5,20,409,8,20,10,20,12,20,412,9,20,1,21,1,21,1,
        21,5,21,417,8,21,10,21,12,21,420,9,21,1,22,1,22,1,22,1,22,1,22,1,
        22,3,22,428,8,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,436,8,23,1,24,
        1,24,1,25,1,25,1,25,5,25,443,8,25,10,25,12,25,446,9,25,1,26,1,26,
        1,27,1,27,3,27,452,8,27,1,27,1,27,1,27,3,27,457,8,27,1,28,4,28,460,
        8,28,11,28,12,28,461,1,29,4,29,465,8,29,11,29,12,29,466,1,30,1,30,
        1,30,1,30,1,30,3,30,474,8,30,1,31,1,31,1,31,5,31,479,8,31,10,31,
        12,31,482,9,31,1,32,1,32,1,32,3,32,487,8,32,1,33,1,33,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,
        518,8,34,1,35,1,35,3,35,522,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,3,35,531,8,35,1,36,1,36,1,37,4,37,536,8,37,11,37,12,37,537,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,548,8,38,1,39,1,39,3,
        39,552,8,39,1,39,3,39,555,8,39,1,40,1,40,1,40,5,40,560,8,40,10,40,
        12,40,563,9,40,1,41,1,41,3,41,567,8,41,1,41,1,41,3,41,571,8,41,1,
        42,1,42,3,42,575,8,42,1,42,1,42,1,42,3,42,580,8,42,1,42,1,42,1,42,
        1,42,3,42,586,8,42,1,43,1,43,1,43,5,43,591,8,43,10,43,12,43,594,
        9,43,1,44,1,44,1,44,3,44,599,8,44,1,45,1,45,1,46,1,46,1,46,1,46,
        1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
        619,8,48,1,49,1,49,1,49,1,49,3,49,625,8,49,1,49,1,49,1,50,3,50,630,
        8,50,1,50,1,50,5,50,634,8,50,10,50,12,50,637,9,50,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,656,8,51,1,51,1,51,1,51,3,51,661,8,51,1,51,3,51,664,8,
        51,1,51,1,51,1,51,1,51,1,51,3,51,671,8,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,686,8,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,698,8,51,1,51,5,
        51,701,8,51,10,51,12,51,704,9,51,1,52,1,52,1,53,1,53,1,53,4,53,711,
        8,53,11,53,12,53,712,1,53,1,53,3,53,717,8,53,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,55,3,55,727,8,55,1,55,1,55,3,55,731,8,55,5,55,733,
        8,55,10,55,12,55,736,9,55,1,56,1,56,1,56,3,56,741,8,56,1,56,3,56,
        744,8,56,1,57,1,57,1,57,1,57,1,57,5,57,751,8,57,10,57,12,57,754,
        9,57,1,58,1,58,3,58,758,8,58,4,58,760,8,58,11,58,12,58,761,1,59,
        4,59,765,8,59,11,59,12,59,766,1,60,1,60,1,60,3,60,772,8,60,1,61,
        1,61,1,61,5,61,777,8,61,10,61,12,61,780,9,61,1,62,1,62,1,62,1,62,
        1,62,3,62,787,8,62,3,62,789,8,62,1,63,1,63,1,63,5,63,794,8,63,10,
        63,12,63,797,9,63,1,64,1,64,3,64,801,8,64,1,65,1,65,3,65,805,8,65,
        1,65,1,65,5,65,809,8,65,10,65,12,65,812,9,65,3,65,814,8,65,1,66,
        1,66,1,66,1,66,1,66,5,66,821,8,66,10,66,12,66,824,9,66,1,66,1,66,
        3,66,828,8,66,1,66,3,66,831,8,66,1,66,1,66,1,66,1,66,3,66,837,8,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,3,66,853,8,66,1,66,1,66,5,66,857,8,66,10,66,12,66,860,9,
        66,3,66,862,8,66,1,66,1,66,1,66,3,66,867,8,66,1,66,3,66,870,8,66,
        1,66,1,66,1,66,1,66,1,66,3,66,877,8,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,
        896,8,66,1,66,1,66,5,66,900,8,66,10,66,12,66,903,9,66,5,66,905,8,
        66,10,66,12,66,908,9,66,1,67,1,67,1,68,1,68,1,68,1,68,3,68,916,8,
        68,1,68,1,68,3,68,920,8,68,1,69,3,69,923,8,69,1,69,1,69,1,69,3,69,
        928,8,69,1,69,5,69,931,8,69,10,69,12,69,934,9,69,1,70,1,70,1,70,
        1,71,4,71,940,8,71,11,71,12,71,941,1,72,1,72,1,72,1,72,1,72,1,72,
        3,72,950,8,72,1,73,1,73,1,73,1,73,1,73,4,73,957,8,73,11,73,12,73,
        958,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,5,74,976,8,74,10,74,12,74,979,9,74,3,74,981,8,74,
        1,74,1,74,1,74,1,74,5,74,987,8,74,10,74,12,74,990,9,74,3,74,992,
        8,74,5,74,994,8,74,10,74,12,74,997,9,74,1,74,1,74,3,74,1001,8,74,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1014,
        8,75,1,76,1,76,3,76,1018,8,76,1,76,1,76,1,77,4,77,1023,8,77,11,77,
        12,77,1024,1,78,1,78,3,78,1029,8,78,1,79,3,79,1032,8,79,1,79,1,79,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1043,8,80,1,80,1,80,1,80,
        1,80,1,80,1,80,3,80,1051,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        3,81,1073,8,81,1,82,1,82,3,82,1077,8,82,3,82,1079,8,82,1,82,1,82,
        3,82,1083,8,82,1,82,1,82,3,82,1087,8,82,1,83,1,83,3,83,1091,8,83,
        1,84,1,84,1,84,5,84,1096,8,84,10,84,12,84,1099,9,84,1,85,1,85,1,
        85,1,85,1,85,1,85,3,85,1107,8,85,1,85,1,85,3,85,1111,8,85,1,85,1,
        85,1,86,3,86,1116,8,86,1,86,1,86,1,87,4,87,1121,8,87,11,87,12,87,
        1122,1,88,1,88,1,88,3,88,1128,8,88,1,89,3,89,1131,8,89,1,89,1,89,
        3,89,1135,8,89,1,89,1,89,1,90,4,90,1140,8,90,11,90,12,90,1141,1,
        90,0,2,102,132,91,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,0,20,1,0,115,116,3,0,52,52,85,85,87,87,2,0,52,52,63,63,5,0,84,
        84,86,86,88,88,91,91,96,97,1,0,88,90,2,0,84,84,86,86,1,0,82,83,1,
        0,78,81,1,0,113,114,1,0,102,112,6,0,28,28,39,39,47,47,53,53,56,56,
        71,71,1,0,5,7,2,0,54,54,57,57,4,0,32,32,48,48,60,60,64,64,2,0,10,
        10,12,16,2,0,72,73,101,101,1,0,72,73,2,0,88,88,95,95,2,0,17,17,19,
        19,2,0,20,20,60,60,1255,0,182,1,0,0,0,2,198,1,0,0,0,4,204,1,0,0,
        0,6,242,1,0,0,0,8,244,1,0,0,0,10,251,1,0,0,0,12,261,1,0,0,0,14,280,
        1,0,0,0,16,300,1,0,0,0,18,311,1,0,0,0,20,327,1,0,0,0,22,339,1,0,
        0,0,24,341,1,0,0,0,26,349,1,0,0,0,28,357,1,0,0,0,30,365,1,0,0,0,
        32,373,1,0,0,0,34,381,1,0,0,0,36,389,1,0,0,0,38,397,1,0,0,0,40,405,
        1,0,0,0,42,413,1,0,0,0,44,421,1,0,0,0,46,435,1,0,0,0,48,437,1,0,
        0,0,50,439,1,0,0,0,52,447,1,0,0,0,54,456,1,0,0,0,56,459,1,0,0,0,
        58,464,1,0,0,0,60,473,1,0,0,0,62,475,1,0,0,0,64,483,1,0,0,0,66,488,
        1,0,0,0,68,517,1,0,0,0,70,530,1,0,0,0,72,532,1,0,0,0,74,535,1,0,
        0,0,76,547,1,0,0,0,78,551,1,0,0,0,80,556,1,0,0,0,82,570,1,0,0,0,
        84,585,1,0,0,0,86,587,1,0,0,0,88,595,1,0,0,0,90,600,1,0,0,0,92,602,
        1,0,0,0,94,607,1,0,0,0,96,618,1,0,0,0,98,620,1,0,0,0,100,629,1,0,
        0,0,102,655,1,0,0,0,104,705,1,0,0,0,106,716,1,0,0,0,108,718,1,0,
        0,0,110,726,1,0,0,0,112,737,1,0,0,0,114,752,1,0,0,0,116,759,1,0,
        0,0,118,764,1,0,0,0,120,768,1,0,0,0,122,773,1,0,0,0,124,788,1,0,
        0,0,126,790,1,0,0,0,128,798,1,0,0,0,130,813,1,0,0,0,132,861,1,0,
        0,0,134,909,1,0,0,0,136,919,1,0,0,0,138,922,1,0,0,0,140,935,1,0,
        0,0,142,939,1,0,0,0,144,949,1,0,0,0,146,951,1,0,0,0,148,1000,1,0,
        0,0,150,1013,1,0,0,0,152,1015,1,0,0,0,154,1022,1,0,0,0,156,1028,
        1,0,0,0,158,1031,1,0,0,0,160,1050,1,0,0,0,162,1072,1,0,0,0,164,1078,
        1,0,0,0,166,1088,1,0,0,0,168,1092,1,0,0,0,170,1110,1,0,0,0,172,1115,
        1,0,0,0,174,1120,1,0,0,0,176,1127,1,0,0,0,178,1130,1,0,0,0,180,1139,
        1,0,0,0,182,183,5,21,0,0,183,185,5,23,0,0,184,186,3,2,1,0,185,184,
        1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,
        1,0,0,0,189,196,5,26,0,0,190,192,5,1,0,0,191,193,3,4,2,0,192,191,
        1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,
        1,0,0,0,196,190,1,0,0,0,196,197,1,0,0,0,197,1,1,0,0,0,198,202,5,
        23,0,0,199,200,5,78,0,0,200,201,5,22,0,0,201,203,5,80,0,0,202,199,
        1,0,0,0,202,203,1,0,0,0,203,3,1,0,0,0,204,207,5,23,0,0,205,206,5,
        102,0,0,206,208,3,6,3,0,207,205,1,0,0,0,207,208,1,0,0,0,208,5,1,
        0,0,0,209,243,5,118,0,0,210,243,5,119,0,0,211,213,5,121,0,0,212,
        211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,
        243,1,0,0,0,216,217,5,72,0,0,217,218,3,50,25,0,218,219,5,73,0,0,
        219,243,1,0,0,0,220,243,3,8,4,0,221,223,5,2,0,0,222,221,1,0,0,0,
        222,223,1,0,0,0,223,224,1,0,0,0,224,225,5,72,0,0,225,226,3,152,76,
        0,226,227,5,73,0,0,227,243,1,0,0,0,228,229,5,3,0,0,229,230,5,72,
        0,0,230,231,3,18,9,0,231,232,5,101,0,0,232,233,3,128,64,0,233,234,
        5,73,0,0,234,243,1,0,0,0,235,236,5,4,0,0,236,237,5,72,0,0,237,238,
        3,128,64,0,238,239,5,101,0,0,239,240,3,18,9,0,240,241,5,73,0,0,241,
        243,1,0,0,0,242,209,1,0,0,0,242,210,1,0,0,0,242,212,1,0,0,0,242,
        216,1,0,0,0,242,220,1,0,0,0,242,222,1,0,0,0,242,228,1,0,0,0,242,
        235,1,0,0,0,243,7,1,0,0,0,244,245,5,67,0,0,245,246,5,72,0,0,246,
        247,3,46,23,0,247,248,5,101,0,0,248,249,3,10,5,0,249,250,5,73,0,
        0,250,9,1,0,0,0,251,256,3,12,6,0,252,253,5,101,0,0,253,255,3,12,
        6,0,254,252,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,
        0,0,257,11,1,0,0,0,258,256,1,0,0,0,259,262,3,128,64,0,260,262,5,
        34,0,0,261,259,1,0,0,0,261,260,1,0,0,0,262,263,1,0,0,0,263,264,5,
        99,0,0,264,265,3,46,23,0,265,13,1,0,0,0,266,281,3,6,3,0,267,269,
        5,2,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,
        5,72,0,0,271,272,3,128,64,0,272,273,5,73,0,0,273,274,5,76,0,0,274,
        276,3,138,69,0,275,277,5,101,0,0,276,275,1,0,0,0,276,277,1,0,0,0,
        277,278,1,0,0,0,278,279,5,77,0,0,279,281,1,0,0,0,280,266,1,0,0,0,
        280,268,1,0,0,0,281,297,1,0,0,0,282,283,5,74,0,0,283,284,3,50,25,
        0,284,285,5,75,0,0,285,296,1,0,0,0,286,288,5,72,0,0,287,289,3,16,
        8,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,296,5,73,
        0,0,291,292,7,0,0,0,292,296,5,118,0,0,293,296,5,85,0,0,294,296,5,
        87,0,0,295,282,1,0,0,0,295,286,1,0,0,0,295,291,1,0,0,0,295,293,1,
        0,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,
        0,0,0,298,15,1,0,0,0,299,297,1,0,0,0,300,305,3,46,23,0,301,302,5,
        101,0,0,302,304,3,46,23,0,303,301,1,0,0,0,304,307,1,0,0,0,305,303,
        1,0,0,0,305,306,1,0,0,0,306,17,1,0,0,0,307,305,1,0,0,0,308,310,7,
        1,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,
        0,0,0,312,325,1,0,0,0,313,311,1,0,0,0,314,326,3,14,7,0,315,316,3,
        20,10,0,316,317,3,22,11,0,317,326,1,0,0,0,318,319,7,2,0,0,319,320,
        5,72,0,0,320,321,3,128,64,0,321,322,5,73,0,0,322,326,1,0,0,0,323,
        324,5,93,0,0,324,326,5,118,0,0,325,314,1,0,0,0,325,315,1,0,0,0,325,
        318,1,0,0,0,325,323,1,0,0,0,326,19,1,0,0,0,327,328,7,3,0,0,328,21,
        1,0,0,0,329,331,5,2,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,332,
        1,0,0,0,332,333,5,72,0,0,333,334,3,128,64,0,334,335,5,73,0,0,335,
        336,3,22,11,0,336,340,1,0,0,0,337,340,3,18,9,0,338,340,5,120,0,0,
        339,330,1,0,0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,23,1,0,0,0,341,
        346,3,22,11,0,342,343,7,4,0,0,343,345,3,22,11,0,344,342,1,0,0,0,
        345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,25,1,0,0,0,348,
        346,1,0,0,0,349,354,3,24,12,0,350,351,7,5,0,0,351,353,3,24,12,0,
        352,350,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,
        355,27,1,0,0,0,356,354,1,0,0,0,357,362,3,26,13,0,358,359,7,6,0,0,
        359,361,3,26,13,0,360,358,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,
        0,362,363,1,0,0,0,363,29,1,0,0,0,364,362,1,0,0,0,365,370,3,28,14,
        0,366,367,7,7,0,0,367,369,3,28,14,0,368,366,1,0,0,0,369,372,1,0,
        0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,31,1,0,0,0,372,370,1,0,0,
        0,373,378,3,30,15,0,374,375,7,8,0,0,375,377,3,30,15,0,376,374,1,
        0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,33,1,0,
        0,0,380,378,1,0,0,0,381,386,3,32,16,0,382,383,5,91,0,0,383,385,3,
        32,16,0,384,382,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,
        1,0,0,0,387,35,1,0,0,0,388,386,1,0,0,0,389,394,3,34,17,0,390,391,
        5,95,0,0,391,393,3,34,17,0,392,390,1,0,0,0,393,396,1,0,0,0,394,392,
        1,0,0,0,394,395,1,0,0,0,395,37,1,0,0,0,396,394,1,0,0,0,397,402,3,
        36,18,0,398,399,5,92,0,0,399,401,3,36,18,0,400,398,1,0,0,0,401,404,
        1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,39,1,0,0,0,404,402,1,
        0,0,0,405,410,3,38,19,0,406,407,5,93,0,0,407,409,3,38,19,0,408,406,
        1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,41,1,
        0,0,0,412,410,1,0,0,0,413,418,3,40,20,0,414,415,5,94,0,0,415,417,
        3,40,20,0,416,414,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,
        1,0,0,0,419,43,1,0,0,0,420,418,1,0,0,0,421,427,3,42,21,0,422,423,
        5,98,0,0,423,424,3,50,25,0,424,425,5,99,0,0,425,426,3,44,22,0,426,
        428,1,0,0,0,427,422,1,0,0,0,427,428,1,0,0,0,428,45,1,0,0,0,429,436,
        3,44,22,0,430,431,3,18,9,0,431,432,3,48,24,0,432,433,3,46,23,0,433,
        436,1,0,0,0,434,436,5,120,0,0,435,429,1,0,0,0,435,430,1,0,0,0,435,
        434,1,0,0,0,436,47,1,0,0,0,437,438,7,9,0,0,438,49,1,0,0,0,439,444,
        3,46,23,0,440,441,5,101,0,0,441,443,3,46,23,0,442,440,1,0,0,0,443,
        446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,51,1,0,0,0,446,444,
        1,0,0,0,447,448,3,44,22,0,448,53,1,0,0,0,449,451,3,56,28,0,450,452,
        3,62,31,0,451,450,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,454,
        5,100,0,0,454,457,1,0,0,0,455,457,3,146,73,0,456,449,1,0,0,0,456,
        455,1,0,0,0,457,55,1,0,0,0,458,460,3,60,30,0,459,458,1,0,0,0,460,
        461,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,57,1,0,0,0,463,465,
        3,60,30,0,464,463,1,0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,467,
        1,0,0,0,467,59,1,0,0,0,468,474,3,66,33,0,469,474,3,68,34,0,470,474,
        3,94,47,0,471,474,3,96,48,0,472,474,3,98,49,0,473,468,1,0,0,0,473,
        469,1,0,0,0,473,470,1,0,0,0,473,471,1,0,0,0,473,472,1,0,0,0,474,
        61,1,0,0,0,475,480,3,64,32,0,476,477,5,101,0,0,477,479,3,64,32,0,
        478,476,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,
        481,63,1,0,0,0,482,480,1,0,0,0,483,486,3,100,50,0,484,485,5,102,
        0,0,485,487,3,136,68,0,486,484,1,0,0,0,486,487,1,0,0,0,487,65,1,
        0,0,0,488,489,7,10,0,0,489,67,1,0,0,0,490,518,5,59,0,0,491,518,5,
        31,0,0,492,518,5,50,0,0,493,518,5,45,0,0,494,518,5,46,0,0,495,518,
        5,40,0,0,496,518,5,36,0,0,497,518,5,51,0,0,498,518,5,58,0,0,499,
        518,5,65,0,0,500,518,5,66,0,0,501,518,5,5,0,0,502,518,5,6,0,0,503,
        518,5,7,0,0,504,505,5,2,0,0,505,506,5,72,0,0,506,507,7,11,0,0,507,
        518,5,73,0,0,508,518,3,92,46,0,509,518,3,70,35,0,510,518,3,84,42,
        0,511,518,3,134,67,0,512,513,5,8,0,0,513,514,5,72,0,0,514,515,3,
        52,26,0,515,516,5,73,0,0,516,518,1,0,0,0,517,490,1,0,0,0,517,491,
        1,0,0,0,517,492,1,0,0,0,517,493,1,0,0,0,517,494,1,0,0,0,517,495,
        1,0,0,0,517,496,1,0,0,0,517,497,1,0,0,0,517,498,1,0,0,0,517,499,
        1,0,0,0,517,500,1,0,0,0,517,501,1,0,0,0,517,502,1,0,0,0,517,503,
        1,0,0,0,517,504,1,0,0,0,517,508,1,0,0,0,517,509,1,0,0,0,517,510,
        1,0,0,0,517,511,1,0,0,0,517,512,1,0,0,0,518,69,1,0,0,0,519,521,3,
        72,36,0,520,522,5,118,0,0,521,520,1,0,0,0,521,522,1,0,0,0,522,523,
        1,0,0,0,523,524,5,76,0,0,524,525,3,74,37,0,525,526,5,77,0,0,526,
        531,1,0,0,0,527,528,3,72,36,0,528,529,5,118,0,0,529,531,1,0,0,0,
        530,519,1,0,0,0,530,527,1,0,0,0,531,71,1,0,0,0,532,533,7,12,0,0,
        533,73,1,0,0,0,534,536,3,76,38,0,535,534,1,0,0,0,536,537,1,0,0,0,
        537,535,1,0,0,0,537,538,1,0,0,0,538,75,1,0,0,0,539,540,3,78,39,0,
        540,541,3,80,40,0,541,542,5,100,0,0,542,548,1,0,0,0,543,544,3,78,
        39,0,544,545,5,100,0,0,545,548,1,0,0,0,546,548,3,146,73,0,547,539,
        1,0,0,0,547,543,1,0,0,0,547,546,1,0,0,0,548,77,1,0,0,0,549,552,3,
        68,34,0,550,552,3,94,47,0,551,549,1,0,0,0,551,550,1,0,0,0,552,554,
        1,0,0,0,553,555,3,78,39,0,554,553,1,0,0,0,554,555,1,0,0,0,555,79,
        1,0,0,0,556,561,3,82,41,0,557,558,5,101,0,0,558,560,3,82,41,0,559,
        557,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,
        81,1,0,0,0,563,561,1,0,0,0,564,571,3,100,50,0,565,567,3,100,50,0,
        566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,5,99,0,0,
        569,571,3,52,26,0,570,564,1,0,0,0,570,566,1,0,0,0,571,83,1,0,0,0,
        572,574,5,38,0,0,573,575,5,118,0,0,574,573,1,0,0,0,574,575,1,0,0,
        0,575,576,1,0,0,0,576,577,5,76,0,0,577,579,3,86,43,0,578,580,5,101,
        0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,582,5,77,
        0,0,582,586,1,0,0,0,583,584,5,38,0,0,584,586,5,118,0,0,585,572,1,
        0,0,0,585,583,1,0,0,0,586,85,1,0,0,0,587,592,3,88,44,0,588,589,5,
        101,0,0,589,591,3,88,44,0,590,588,1,0,0,0,591,594,1,0,0,0,592,590,
        1,0,0,0,592,593,1,0,0,0,593,87,1,0,0,0,594,592,1,0,0,0,595,598,3,
        90,45,0,596,597,5,102,0,0,597,599,3,52,26,0,598,596,1,0,0,0,598,
        599,1,0,0,0,599,89,1,0,0,0,600,601,5,118,0,0,601,91,1,0,0,0,602,
        603,5,64,0,0,603,604,5,72,0,0,604,605,3,128,64,0,605,606,5,73,0,
        0,606,93,1,0,0,0,607,608,7,13,0,0,608,95,1,0,0,0,609,619,5,44,0,
        0,610,619,5,69,0,0,611,619,5,9,0,0,612,619,5,10,0,0,613,619,3,108,
        54,0,614,615,5,11,0,0,615,616,5,72,0,0,616,617,5,118,0,0,617,619,
        5,73,0,0,618,609,1,0,0,0,618,610,1,0,0,0,618,611,1,0,0,0,618,612,
        1,0,0,0,618,613,1,0,0,0,618,614,1,0,0,0,619,97,1,0,0,0,620,621,5,
        62,0,0,621,624,5,72,0,0,622,625,3,128,64,0,623,625,3,52,26,0,624,
        622,1,0,0,0,624,623,1,0,0,0,625,626,1,0,0,0,626,627,5,73,0,0,627,
        99,1,0,0,0,628,630,3,116,58,0,629,628,1,0,0,0,629,630,1,0,0,0,630,
        631,1,0,0,0,631,635,3,102,51,0,632,634,3,106,53,0,633,632,1,0,0,
        0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,101,1,0,0,
        0,637,635,1,0,0,0,638,639,6,51,-1,0,639,656,5,118,0,0,640,641,5,
        72,0,0,641,642,3,100,50,0,642,643,5,73,0,0,643,656,1,0,0,0,644,645,
        5,118,0,0,645,646,5,99,0,0,646,656,5,120,0,0,647,648,3,104,52,0,
        648,649,5,118,0,0,649,656,1,0,0,0,650,651,5,72,0,0,651,652,3,104,
        52,0,652,653,3,100,50,0,653,654,5,73,0,0,654,656,1,0,0,0,655,638,
        1,0,0,0,655,640,1,0,0,0,655,644,1,0,0,0,655,647,1,0,0,0,655,650,
        1,0,0,0,656,702,1,0,0,0,657,658,10,9,0,0,658,660,5,74,0,0,659,661,
        3,118,59,0,660,659,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,664,
        3,46,23,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,701,
        5,75,0,0,666,667,10,8,0,0,667,668,5,74,0,0,668,670,5,53,0,0,669,
        671,3,118,59,0,670,669,1,0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,
        673,3,46,23,0,673,674,5,75,0,0,674,701,1,0,0,0,675,676,10,7,0,0,
        676,677,5,74,0,0,677,678,3,118,59,0,678,679,5,53,0,0,679,680,3,46,
        23,0,680,681,5,75,0,0,681,701,1,0,0,0,682,683,10,6,0,0,683,685,5,
        74,0,0,684,686,3,118,59,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,
        1,0,0,0,687,688,5,88,0,0,688,701,5,75,0,0,689,690,10,5,0,0,690,691,
        5,72,0,0,691,692,3,120,60,0,692,693,5,73,0,0,693,701,1,0,0,0,694,
        695,10,4,0,0,695,697,5,72,0,0,696,698,3,126,63,0,697,696,1,0,0,0,
        697,698,1,0,0,0,698,699,1,0,0,0,699,701,5,73,0,0,700,657,1,0,0,0,
        700,666,1,0,0,0,700,675,1,0,0,0,700,682,1,0,0,0,700,689,1,0,0,0,
        700,694,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,
        703,103,1,0,0,0,704,702,1,0,0,0,705,706,7,14,0,0,706,105,1,0,0,0,
        707,708,5,17,0,0,708,710,5,72,0,0,709,711,5,121,0,0,710,709,1,0,
        0,0,711,712,1,0,0,0,712,710,1,0,0,0,712,713,1,0,0,0,713,714,1,0,
        0,0,714,717,5,73,0,0,715,717,3,108,54,0,716,707,1,0,0,0,716,715,
        1,0,0,0,717,107,1,0,0,0,718,719,5,18,0,0,719,720,5,72,0,0,720,721,
        5,72,0,0,721,722,3,110,55,0,722,723,5,73,0,0,723,724,5,73,0,0,724,
        109,1,0,0,0,725,727,3,112,56,0,726,725,1,0,0,0,726,727,1,0,0,0,727,
        734,1,0,0,0,728,730,5,101,0,0,729,731,3,112,56,0,730,729,1,0,0,0,
        730,731,1,0,0,0,731,733,1,0,0,0,732,728,1,0,0,0,733,736,1,0,0,0,
        734,732,1,0,0,0,734,735,1,0,0,0,735,111,1,0,0,0,736,734,1,0,0,0,
        737,743,8,15,0,0,738,740,5,72,0,0,739,741,3,16,8,0,740,739,1,0,0,
        0,740,741,1,0,0,0,741,742,1,0,0,0,742,744,5,73,0,0,743,738,1,0,0,
        0,743,744,1,0,0,0,744,113,1,0,0,0,745,751,8,16,0,0,746,747,5,72,
        0,0,747,748,3,114,57,0,748,749,5,73,0,0,749,751,1,0,0,0,750,745,
        1,0,0,0,750,746,1,0,0,0,751,754,1,0,0,0,752,750,1,0,0,0,752,753,
        1,0,0,0,753,115,1,0,0,0,754,752,1,0,0,0,755,757,7,17,0,0,756,758,
        3,118,59,0,757,756,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,755,
        1,0,0,0,760,761,1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,117,
        1,0,0,0,763,765,3,94,47,0,764,763,1,0,0,0,765,766,1,0,0,0,766,764,
        1,0,0,0,766,767,1,0,0,0,767,119,1,0,0,0,768,771,3,122,61,0,769,770,
        5,101,0,0,770,772,5,117,0,0,771,769,1,0,0,0,771,772,1,0,0,0,772,
        121,1,0,0,0,773,778,3,124,62,0,774,775,5,101,0,0,775,777,3,124,62,
        0,776,774,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,
        0,779,123,1,0,0,0,780,778,1,0,0,0,781,782,3,56,28,0,782,783,3,100,
        50,0,783,789,1,0,0,0,784,786,3,58,29,0,785,787,3,130,65,0,786,785,
        1,0,0,0,786,787,1,0,0,0,787,789,1,0,0,0,788,781,1,0,0,0,788,784,
        1,0,0,0,789,125,1,0,0,0,790,795,5,118,0,0,791,792,5,101,0,0,792,
        794,5,118,0,0,793,791,1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,795,
        796,1,0,0,0,796,127,1,0,0,0,797,795,1,0,0,0,798,800,3,78,39,0,799,
        801,3,130,65,0,800,799,1,0,0,0,800,801,1,0,0,0,801,129,1,0,0,0,802,
        814,3,116,58,0,803,805,3,116,58,0,804,803,1,0,0,0,804,805,1,0,0,
        0,805,806,1,0,0,0,806,810,3,132,66,0,807,809,3,106,53,0,808,807,
        1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,814,
        1,0,0,0,812,810,1,0,0,0,813,802,1,0,0,0,813,804,1,0,0,0,814,131,
        1,0,0,0,815,816,6,66,-1,0,816,817,5,72,0,0,817,818,3,130,65,0,818,
        822,5,73,0,0,819,821,3,106,53,0,820,819,1,0,0,0,821,824,1,0,0,0,
        822,820,1,0,0,0,822,823,1,0,0,0,823,862,1,0,0,0,824,822,1,0,0,0,
        825,827,5,74,0,0,826,828,3,118,59,0,827,826,1,0,0,0,827,828,1,0,
        0,0,828,830,1,0,0,0,829,831,3,46,23,0,830,829,1,0,0,0,830,831,1,
        0,0,0,831,832,1,0,0,0,832,862,5,75,0,0,833,834,5,74,0,0,834,836,
        5,53,0,0,835,837,3,118,59,0,836,835,1,0,0,0,836,837,1,0,0,0,837,
        838,1,0,0,0,838,839,3,46,23,0,839,840,5,75,0,0,840,862,1,0,0,0,841,
        842,5,74,0,0,842,843,3,118,59,0,843,844,5,53,0,0,844,845,3,46,23,
        0,845,846,5,75,0,0,846,862,1,0,0,0,847,848,5,74,0,0,848,849,5,88,
        0,0,849,862,5,75,0,0,850,852,5,72,0,0,851,853,3,120,60,0,852,851,
        1,0,0,0,852,853,1,0,0,0,853,854,1,0,0,0,854,858,5,73,0,0,855,857,
        3,106,53,0,856,855,1,0,0,0,857,860,1,0,0,0,858,856,1,0,0,0,858,859,
        1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,861,815,1,0,0,0,861,825,
        1,0,0,0,861,833,1,0,0,0,861,841,1,0,0,0,861,847,1,0,0,0,861,850,
        1,0,0,0,862,906,1,0,0,0,863,864,10,5,0,0,864,866,5,74,0,0,865,867,
        3,118,59,0,866,865,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,870,
        3,46,23,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,905,
        5,75,0,0,872,873,10,4,0,0,873,874,5,74,0,0,874,876,5,53,0,0,875,
        877,3,118,59,0,876,875,1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,878,
        879,3,46,23,0,879,880,5,75,0,0,880,905,1,0,0,0,881,882,10,3,0,0,
        882,883,5,74,0,0,883,884,3,118,59,0,884,885,5,53,0,0,885,886,3,46,
        23,0,886,887,5,75,0,0,887,905,1,0,0,0,888,889,10,2,0,0,889,890,5,
        74,0,0,890,891,5,88,0,0,891,905,5,75,0,0,892,893,10,1,0,0,893,895,
        5,72,0,0,894,896,3,120,60,0,895,894,1,0,0,0,895,896,1,0,0,0,896,
        897,1,0,0,0,897,901,5,73,0,0,898,900,3,106,53,0,899,898,1,0,0,0,
        900,903,1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,905,1,0,0,0,
        903,901,1,0,0,0,904,863,1,0,0,0,904,872,1,0,0,0,904,881,1,0,0,0,
        904,888,1,0,0,0,904,892,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,
        906,907,1,0,0,0,907,133,1,0,0,0,908,906,1,0,0,0,909,910,5,118,0,
        0,910,135,1,0,0,0,911,920,3,46,23,0,912,913,5,76,0,0,913,915,3,138,
        69,0,914,916,5,101,0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,
        0,0,0,917,918,5,77,0,0,918,920,1,0,0,0,919,911,1,0,0,0,919,912,1,
        0,0,0,920,137,1,0,0,0,921,923,3,140,70,0,922,921,1,0,0,0,922,923,
        1,0,0,0,923,924,1,0,0,0,924,932,3,136,68,0,925,927,5,101,0,0,926,
        928,3,140,70,0,927,926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,
        931,3,136,68,0,930,925,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,
        933,1,0,0,0,933,139,1,0,0,0,934,932,1,0,0,0,935,936,3,142,71,0,936,
        937,5,102,0,0,937,141,1,0,0,0,938,940,3,144,72,0,939,938,1,0,0,0,
        940,941,1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,143,1,0,0,0,
        943,944,5,74,0,0,944,945,3,52,26,0,945,946,5,75,0,0,946,950,1,0,
        0,0,947,948,5,116,0,0,948,950,5,118,0,0,949,943,1,0,0,0,949,947,
        1,0,0,0,950,145,1,0,0,0,951,952,5,70,0,0,952,953,5,72,0,0,953,954,
        3,52,26,0,954,956,5,101,0,0,955,957,5,121,0,0,956,955,1,0,0,0,957,
        958,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,960,1,0,0,0,960,
        961,5,73,0,0,961,962,5,100,0,0,962,147,1,0,0,0,963,1001,3,150,75,
        0,964,1001,3,152,76,0,965,1001,3,158,79,0,966,1001,3,160,80,0,967,
        1001,3,162,81,0,968,1001,3,170,85,0,969,970,7,18,0,0,970,971,7,19,
        0,0,971,980,5,72,0,0,972,977,3,42,21,0,973,974,5,101,0,0,974,976,
        3,42,21,0,975,973,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,
        1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,980,972,1,0,0,0,980,981,
        1,0,0,0,981,995,1,0,0,0,982,991,5,99,0,0,983,988,3,42,21,0,984,985,
        5,101,0,0,985,987,3,42,21,0,986,984,1,0,0,0,987,990,1,0,0,0,988,
        986,1,0,0,0,988,989,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,991,
        983,1,0,0,0,991,992,1,0,0,0,992,994,1,0,0,0,993,982,1,0,0,0,994,
        997,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,998,1,0,0,0,997,
        995,1,0,0,0,998,999,5,73,0,0,999,1001,5,100,0,0,1000,963,1,0,0,0,
        1000,964,1,0,0,0,1000,965,1,0,0,0,1000,966,1,0,0,0,1000,967,1,0,
        0,0,1000,968,1,0,0,0,1000,969,1,0,0,0,1001,149,1,0,0,0,1002,1003,
        5,118,0,0,1003,1004,5,99,0,0,1004,1014,3,148,74,0,1005,1006,5,30,
        0,0,1006,1007,3,52,26,0,1007,1008,5,99,0,0,1008,1009,3,148,74,0,
        1009,1014,1,0,0,0,1010,1011,5,34,0,0,1011,1012,5,99,0,0,1012,1014,
        3,148,74,0,1013,1002,1,0,0,0,1013,1005,1,0,0,0,1013,1010,1,0,0,0,
        1014,151,1,0,0,0,1015,1017,5,76,0,0,1016,1018,3,154,77,0,1017,1016,
        1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,1020,5,77,0,0,1020,
        153,1,0,0,0,1021,1023,3,156,78,0,1022,1021,1,0,0,0,1023,1024,1,0,
        0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,155,1,0,0,0,1026,1029,
        3,148,74,0,1027,1029,3,54,27,0,1028,1026,1,0,0,0,1028,1027,1,0,0,
        0,1029,157,1,0,0,0,1030,1032,3,50,25,0,1031,1030,1,0,0,0,1031,1032,
        1,0,0,0,1032,1033,1,0,0,0,1033,1034,5,100,0,0,1034,159,1,0,0,0,1035,
        1036,5,43,0,0,1036,1037,5,72,0,0,1037,1038,3,50,25,0,1038,1039,5,
        73,0,0,1039,1042,3,148,74,0,1040,1041,5,37,0,0,1041,1043,3,148,74,
        0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,1051,1,0,0,0,1044,1045,
        5,55,0,0,1045,1046,5,72,0,0,1046,1047,3,50,25,0,1047,1048,5,73,0,
        0,1048,1049,3,148,74,0,1049,1051,1,0,0,0,1050,1035,1,0,0,0,1050,
        1044,1,0,0,0,1051,161,1,0,0,0,1052,1053,5,61,0,0,1053,1054,5,72,
        0,0,1054,1055,3,50,25,0,1055,1056,5,73,0,0,1056,1057,3,148,74,0,
        1057,1073,1,0,0,0,1058,1059,5,35,0,0,1059,1060,3,148,74,0,1060,1061,
        5,61,0,0,1061,1062,5,72,0,0,1062,1063,3,50,25,0,1063,1064,5,73,0,
        0,1064,1065,5,100,0,0,1065,1073,1,0,0,0,1066,1067,5,41,0,0,1067,
        1068,5,72,0,0,1068,1069,3,164,82,0,1069,1070,5,73,0,0,1070,1071,
        3,148,74,0,1071,1073,1,0,0,0,1072,1052,1,0,0,0,1072,1058,1,0,0,0,
        1072,1066,1,0,0,0,1073,163,1,0,0,0,1074,1079,3,166,83,0,1075,1077,
        3,50,25,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,1079,1,0,0,0,
        1078,1074,1,0,0,0,1078,1076,1,0,0,0,1079,1080,1,0,0,0,1080,1082,
        5,100,0,0,1081,1083,3,168,84,0,1082,1081,1,0,0,0,1082,1083,1,0,0,
        0,1083,1084,1,0,0,0,1084,1086,5,100,0,0,1085,1087,3,168,84,0,1086,
        1085,1,0,0,0,1086,1087,1,0,0,0,1087,165,1,0,0,0,1088,1090,3,56,28,
        0,1089,1091,3,62,31,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,167,
        1,0,0,0,1092,1097,3,46,23,0,1093,1094,5,101,0,0,1094,1096,3,46,23,
        0,1095,1093,1,0,0,0,1096,1099,1,0,0,0,1097,1095,1,0,0,0,1097,1098,
        1,0,0,0,1098,169,1,0,0,0,1099,1097,1,0,0,0,1100,1101,5,42,0,0,1101,
        1111,5,118,0,0,1102,1111,5,33,0,0,1103,1111,5,29,0,0,1104,1106,5,
        49,0,0,1105,1107,3,50,25,0,1106,1105,1,0,0,0,1106,1107,1,0,0,0,1107,
        1111,1,0,0,0,1108,1109,5,42,0,0,1109,1111,3,18,9,0,1110,1100,1,0,
        0,0,1110,1102,1,0,0,0,1110,1103,1,0,0,0,1110,1104,1,0,0,0,1110,1108,
        1,0,0,0,1111,1112,1,0,0,0,1112,1113,5,100,0,0,1113,171,1,0,0,0,1114,
        1116,3,174,87,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,
        0,0,0,1117,1118,5,0,0,1,1118,173,1,0,0,0,1119,1121,3,176,88,0,1120,
        1119,1,0,0,0,1121,1122,1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,0,
        0,1123,175,1,0,0,0,1124,1128,3,178,89,0,1125,1128,3,54,27,0,1126,
        1128,5,100,0,0,1127,1124,1,0,0,0,1127,1125,1,0,0,0,1127,1126,1,0,
        0,0,1128,177,1,0,0,0,1129,1131,3,56,28,0,1130,1129,1,0,0,0,1130,
        1131,1,0,0,0,1131,1132,1,0,0,0,1132,1134,3,100,50,0,1133,1135,3,
        180,90,0,1134,1133,1,0,0,0,1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,
        1137,3,152,76,0,1137,179,1,0,0,0,1138,1140,3,54,27,0,1139,1138,1,
        0,0,0,1140,1141,1,0,0,0,1141,1139,1,0,0,0,1141,1142,1,0,0,0,1142,
        181,1,0,0,0,139,187,194,196,202,207,214,222,242,256,261,268,276,
        280,288,295,297,305,311,325,330,339,346,354,362,370,378,386,394,
        402,410,418,427,435,444,451,456,461,466,473,480,486,517,521,530,
        537,547,551,554,561,566,570,574,579,585,592,598,618,624,629,635,
        655,660,663,670,685,697,700,702,712,716,726,730,734,740,743,750,
        752,757,761,766,771,778,786,788,795,800,804,810,813,822,827,830,
        836,852,858,861,866,869,876,895,901,904,906,915,919,922,927,932,
        941,949,958,977,980,988,991,995,1000,1013,1017,1024,1028,1031,1042,
        1050,1072,1076,1078,1082,1086,1090,1097,1106,1110,1115,1122,1127,
        1130,1134,1141
    ]

class NetlistParser ( Parser ):

    grammarFileName = "Netlist.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'parameters'", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__cdecl'", "'__clrcall'", "'__fastcall'", "'__thiscall'", 
                     "'__vectorcall'", "'__asm'", "'__attribute__'", "'__asm__'", 
                     "'__volatile__'", "'subckt'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'auto'", "'break'", "'case'", "'char'", "'const'", 
                     "'continue'", "'default'", "'do'", "'double'", "'else'", 
                     "'enum'", "'extern'", "'float'", "'for'", "'goto'", 
                     "'if'", "'inline'", "'int'", "'long'", "'register'", 
                     "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", 
                     "'static'", "'struct'", "'switch'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'", 
                     "'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'", 
                     "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'?'", "':'", "';'", "','", "'='", "'*='", "'/='", 
                     "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
                     "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "SUBCKT_HEADER", "INT", "ID", "COMMENT", 
                      "LINE_CONTINUATION", "NEWLINE", "WS", "Auto", "Break", 
                      "Case", "Char", "Const", "Continue", "Default", "Do", 
                      "Double", "Else", "Enum", "Extern", "Float", "For", 
                      "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Struct", "Switch", "Typedef", "Union", 
                      "Unsigned", "Void", "Volatile", "While", "Alignas", 
                      "Alignof", "Atomic", "Bool", "Complex", "Generic", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
                      "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
                      "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "Whitespace", "Newline", 
                      "BlockComment", "LineComment" ]

    RULE_subckt = 0
    RULE_node = 1
    RULE_parameter = 2
    RULE_primaryExpression = 3
    RULE_genericSelection = 4
    RULE_genericAssocList = 5
    RULE_genericAssociation = 6
    RULE_postfixExpression = 7
    RULE_argumentExpressionList = 8
    RULE_unaryExpression = 9
    RULE_unaryOperator = 10
    RULE_castExpression = 11
    RULE_multiplicativeExpression = 12
    RULE_additiveExpression = 13
    RULE_shiftExpression = 14
    RULE_relationalExpression = 15
    RULE_equalityExpression = 16
    RULE_andExpression = 17
    RULE_exclusiveOrExpression = 18
    RULE_inclusiveOrExpression = 19
    RULE_logicalAndExpression = 20
    RULE_logicalOrExpression = 21
    RULE_conditionalExpression = 22
    RULE_assignmentExpression = 23
    RULE_assignmentOperator = 24
    RULE_expression = 25
    RULE_constantExpression = 26
    RULE_declaration = 27
    RULE_declarationSpecifiers = 28
    RULE_declarationSpecifiers2 = 29
    RULE_declarationSpecifier = 30
    RULE_initDeclaratorList = 31
    RULE_initDeclarator = 32
    RULE_storageClassSpecifier = 33
    RULE_typeSpecifier = 34
    RULE_structOrUnionSpecifier = 35
    RULE_structOrUnion = 36
    RULE_structDeclarationList = 37
    RULE_structDeclaration = 38
    RULE_specifierQualifierList = 39
    RULE_structDeclaratorList = 40
    RULE_structDeclarator = 41
    RULE_enumSpecifier = 42
    RULE_enumeratorList = 43
    RULE_enumerator = 44
    RULE_enumerationConstant = 45
    RULE_atomicTypeSpecifier = 46
    RULE_typeQualifier = 47
    RULE_functionSpecifier = 48
    RULE_alignmentSpecifier = 49
    RULE_declarator = 50
    RULE_directDeclarator = 51
    RULE_vcSpecificModifer = 52
    RULE_gccDeclaratorExtension = 53
    RULE_gccAttributeSpecifier = 54
    RULE_gccAttributeList = 55
    RULE_gccAttribute = 56
    RULE_nestedParenthesesBlock = 57
    RULE_pointer = 58
    RULE_typeQualifierList = 59
    RULE_parameterTypeList = 60
    RULE_parameterList = 61
    RULE_parameterDeclaration = 62
    RULE_identifierList = 63
    RULE_typeName = 64
    RULE_abstractDeclarator = 65
    RULE_directAbstractDeclarator = 66
    RULE_typedefName = 67
    RULE_initializer = 68
    RULE_initializerList = 69
    RULE_designation = 70
    RULE_designatorList = 71
    RULE_designator = 72
    RULE_staticAssertDeclaration = 73
    RULE_statement = 74
    RULE_labeledStatement = 75
    RULE_compoundStatement = 76
    RULE_blockItemList = 77
    RULE_blockItem = 78
    RULE_expressionStatement = 79
    RULE_selectionStatement = 80
    RULE_iterationStatement = 81
    RULE_forCondition = 82
    RULE_forDeclaration = 83
    RULE_forExpression = 84
    RULE_jumpStatement = 85
    RULE_compilationUnit = 86
    RULE_translationUnit = 87
    RULE_externalDeclaration = 88
    RULE_functionDefinition = 89
    RULE_declarationList = 90

    ruleNames =  [ "subckt", "node", "parameter", "primaryExpression", "genericSelection", 
                   "genericAssocList", "genericAssociation", "postfixExpression", 
                   "argumentExpressionList", "unaryExpression", "unaryOperator", 
                   "castExpression", "multiplicativeExpression", "additiveExpression", 
                   "shiftExpression", "relationalExpression", "equalityExpression", 
                   "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
                   "logicalAndExpression", "logicalOrExpression", "conditionalExpression", 
                   "assignmentExpression", "assignmentOperator", "expression", 
                   "constantExpression", "declaration", "declarationSpecifiers", 
                   "declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList", 
                   "initDeclarator", "storageClassSpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "directDeclarator", "vcSpecificModifer", 
                   "gccDeclaratorExtension", "gccAttributeSpecifier", "gccAttributeList", 
                   "gccAttribute", "nestedParenthesesBlock", "pointer", 
                   "typeQualifierList", "parameterTypeList", "parameterList", 
                   "parameterDeclaration", "identifierList", "typeName", 
                   "abstractDeclarator", "directAbstractDeclarator", "typedefName", 
                   "initializer", "initializerList", "designation", "designatorList", 
                   "designator", "staticAssertDeclaration", "statement", 
                   "labeledStatement", "compoundStatement", "blockItemList", 
                   "blockItem", "expressionStatement", "selectionStatement", 
                   "iterationStatement", "forCondition", "forDeclaration", 
                   "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalDeclaration", "functionDefinition", 
                   "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    SUBCKT_HEADER=21
    INT=22
    ID=23
    COMMENT=24
    LINE_CONTINUATION=25
    NEWLINE=26
    WS=27
    Auto=28
    Break=29
    Case=30
    Char=31
    Const=32
    Continue=33
    Default=34
    Do=35
    Double=36
    Else=37
    Enum=38
    Extern=39
    Float=40
    For=41
    Goto=42
    If=43
    Inline=44
    Int=45
    Long=46
    Register=47
    Restrict=48
    Return=49
    Short=50
    Signed=51
    Sizeof=52
    Static=53
    Struct=54
    Switch=55
    Typedef=56
    Union=57
    Unsigned=58
    Void=59
    Volatile=60
    While=61
    Alignas=62
    Alignof=63
    Atomic=64
    Bool=65
    Complex=66
    Generic=67
    Imaginary=68
    Noreturn=69
    StaticAssert=70
    ThreadLocal=71
    LeftParen=72
    RightParen=73
    LeftBracket=74
    RightBracket=75
    LeftBrace=76
    RightBrace=77
    Less=78
    LessEqual=79
    Greater=80
    GreaterEqual=81
    LeftShift=82
    RightShift=83
    Plus=84
    PlusPlus=85
    Minus=86
    MinusMinus=87
    Star=88
    Div=89
    Mod=90
    And=91
    Or=92
    AndAnd=93
    OrOr=94
    Caret=95
    Not=96
    Tilde=97
    Question=98
    Colon=99
    Semi=100
    Comma=101
    Assign=102
    StarAssign=103
    DivAssign=104
    ModAssign=105
    PlusAssign=106
    MinusAssign=107
    LeftShiftAssign=108
    RightShiftAssign=109
    AndAssign=110
    XorAssign=111
    OrAssign=112
    Equal=113
    NotEqual=114
    Arrow=115
    Dot=116
    Ellipsis=117
    Identifier=118
    Constant=119
    DigitSequence=120
    StringLiteral=121
    Whitespace=122
    Newline=123
    BlockComment=124
    LineComment=125

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SubcktContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBCKT_HEADER(self):
            return self.getToken(NetlistParser.SUBCKT_HEADER, 0)

        def ID(self):
            return self.getToken(NetlistParser.ID, 0)

        def NEWLINE(self):
            return self.getToken(NetlistParser.NEWLINE, 0)

        def node(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.NodeContext)
            else:
                return self.getTypedRuleContext(NetlistParser.NodeContext,i)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NetlistParser.ParameterContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_subckt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubckt" ):
                listener.enterSubckt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubckt" ):
                listener.exitSubckt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubckt" ):
                return visitor.visitSubckt(self)
            else:
                return visitor.visitChildren(self)




    def subckt(self):

        localctx = NetlistParser.SubcktContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_subckt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(NetlistParser.SUBCKT_HEADER)
            self.state = 183
            self.match(NetlistParser.ID)
            self.state = 185 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 184
                self.node()
                self.state = 187 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==23):
                    break

            self.state = 189
            self.match(NetlistParser.NEWLINE)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 190
                self.match(NetlistParser.T__0)
                self.state = 192 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 191
                    self.parameter()
                    self.state = 194 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==23):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(NetlistParser.ID, 0)

        def Less(self):
            return self.getToken(NetlistParser.Less, 0)

        def INT(self):
            return self.getToken(NetlistParser.INT, 0)

        def Greater(self):
            return self.getToken(NetlistParser.Greater, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_node

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNode" ):
                listener.enterNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNode" ):
                listener.exitNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNode" ):
                return visitor.visitNode(self)
            else:
                return visitor.visitChildren(self)




    def node(self):

        localctx = NetlistParser.NodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_node)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(NetlistParser.ID)
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 199
                self.match(NetlistParser.Less)
                self.state = 200
                self.match(NetlistParser.INT)
                self.state = 201
                self.match(NetlistParser.Greater)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(NetlistParser.ID, 0)

        def Assign(self):
            return self.getToken(NetlistParser.Assign, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(NetlistParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = NetlistParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(NetlistParser.ID)
            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 205
                self.match(NetlistParser.Assign)
                self.state = 206
                self.primaryExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def Constant(self):
            return self.getToken(NetlistParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.StringLiteral)
            else:
                return self.getToken(NetlistParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(NetlistParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(NetlistParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(NetlistParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(NetlistParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(NetlistParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(NetlistParser.TypeNameContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = NetlistParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 209
                self.match(NetlistParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 210
                self.match(NetlistParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 212 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 211
                    self.match(NetlistParser.StringLiteral)
                    self.state = 214 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==121):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 216
                self.match(NetlistParser.LeftParen)
                self.state = 217
                self.expression()
                self.state = 218
                self.match(NetlistParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 220
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 221
                    self.match(NetlistParser.T__1)


                self.state = 224
                self.match(NetlistParser.LeftParen)
                self.state = 225
                self.compoundStatement()
                self.state = 226
                self.match(NetlistParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 228
                self.match(NetlistParser.T__2)
                self.state = 229
                self.match(NetlistParser.LeftParen)
                self.state = 230
                self.unaryExpression()
                self.state = 231
                self.match(NetlistParser.Comma)
                self.state = 232
                self.typeName()
                self.state = 233
                self.match(NetlistParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 235
                self.match(NetlistParser.T__3)
                self.state = 236
                self.match(NetlistParser.LeftParen)
                self.state = 237
                self.typeName()
                self.state = 238
                self.match(NetlistParser.Comma)
                self.state = 239
                self.unaryExpression()
                self.state = 240
                self.match(NetlistParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(NetlistParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(NetlistParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(NetlistParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericSelection" ):
                return visitor.visitGenericSelection(self)
            else:
                return visitor.visitChildren(self)




    def genericSelection(self):

        localctx = NetlistParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(NetlistParser.Generic)
            self.state = 245
            self.match(NetlistParser.LeftParen)
            self.state = 246
            self.assignmentExpression()
            self.state = 247
            self.match(NetlistParser.Comma)
            self.state = 248
            self.genericAssocList()
            self.state = 249
            self.match(NetlistParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(NetlistParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssocList" ):
                return visitor.visitGenericAssocList(self)
            else:
                return visitor.visitChildren(self)




    def genericAssocList(self):

        localctx = NetlistParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.genericAssociation()
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101:
                self.state = 252
                self.match(NetlistParser.Comma)
                self.state = 253
                self.genericAssociation()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(NetlistParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(NetlistParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(NetlistParser.Default, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssociation" ):
                return visitor.visitGenericAssociation(self)
            else:
                return visitor.visitChildren(self)




    def genericAssociation(self):

        localctx = NetlistParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 5, 6, 7, 8, 31, 32, 36, 38, 40, 45, 46, 48, 50, 51, 54, 57, 58, 59, 60, 64, 65, 66, 118]:
                self.state = 259
                self.typeName()
                pass
            elif token in [34]:
                self.state = 260
                self.match(NetlistParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 263
            self.match(NetlistParser.Colon)
            self.state = 264
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(NetlistParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.LeftParen)
            else:
                return self.getToken(NetlistParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(NetlistParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.RightParen)
            else:
                return self.getToken(NetlistParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(NetlistParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(NetlistParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(NetlistParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.LeftBracket)
            else:
                return self.getToken(NetlistParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.RightBracket)
            else:
                return self.getToken(NetlistParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Identifier)
            else:
                return self.getToken(NetlistParser.Identifier, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.PlusPlus)
            else:
                return self.getToken(NetlistParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.MinusMinus)
            else:
                return self.getToken(NetlistParser.MinusMinus, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Dot)
            else:
                return self.getToken(NetlistParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Arrow)
            else:
                return self.getToken(NetlistParser.Arrow, i)

        def Comma(self):
            return self.getToken(NetlistParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(NetlistParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = NetlistParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 266
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 267
                    self.match(NetlistParser.T__1)


                self.state = 270
                self.match(NetlistParser.LeftParen)
                self.state = 271
                self.typeName()
                self.state = 272
                self.match(NetlistParser.RightParen)
                self.state = 273
                self.match(NetlistParser.LeftBrace)
                self.state = 274
                self.initializerList()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 275
                    self.match(NetlistParser.Comma)


                self.state = 278
                self.match(NetlistParser.RightBrace)
                pass


            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 26388279107589) != 0):
                self.state = 295
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [74]:
                    self.state = 282
                    self.match(NetlistParser.LeftBracket)
                    self.state = 283
                    self.expression()
                    self.state = 284
                    self.match(NetlistParser.RightBracket)
                    pass
                elif token in [72]:
                    self.state = 286
                    self.match(NetlistParser.LeftParen)
                    self.state = 288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                        self.state = 287
                        self.argumentExpressionList()


                    self.state = 290
                    self.match(NetlistParser.RightParen)
                    pass
                elif token in [115, 116]:
                    self.state = 291
                    _la = self._input.LA(1)
                    if not(_la==115 or _la==116):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 292
                    self.match(NetlistParser.Identifier)
                    pass
                elif token in [85]:
                    self.state = 293
                    self.match(NetlistParser.PlusPlus)
                    pass
                elif token in [87]:
                    self.state = 294
                    self.match(NetlistParser.MinusMinus)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpressionList" ):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpressionList(self):

        localctx = NetlistParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.assignmentExpression()
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101:
                self.state = 301
                self.match(NetlistParser.Comma)
                self.state = 302
                self.assignmentExpression()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(NetlistParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(NetlistParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(NetlistParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(NetlistParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(NetlistParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Sizeof)
            else:
                return self.getToken(NetlistParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(NetlistParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.PlusPlus)
            else:
                return self.getToken(NetlistParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.MinusMinus)
            else:
                return self.getToken(NetlistParser.MinusMinus, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = NetlistParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 308
                    _la = self._input.LA(1)
                    if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & 42949672961) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 67, 72, 118, 119, 121]:
                self.state = 314
                self.postfixExpression()
                pass
            elif token in [84, 86, 88, 91, 96, 97]:
                self.state = 315
                self.unaryOperator()
                self.state = 316
                self.castExpression()
                pass
            elif token in [52, 63]:
                self.state = 318
                _la = self._input.LA(1)
                if not(_la==52 or _la==63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 319
                self.match(NetlistParser.LeftParen)
                self.state = 320
                self.typeName()
                self.state = 321
                self.match(NetlistParser.RightParen)
                pass
            elif token in [93]:
                self.state = 323
                self.match(NetlistParser.AndAnd)
                self.state = 324
                self.match(NetlistParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(NetlistParser.And, 0)

        def Star(self):
            return self.getToken(NetlistParser.Star, 0)

        def Plus(self):
            return self.getToken(NetlistParser.Plus, 0)

        def Minus(self):
            return self.getToken(NetlistParser.Minus, 0)

        def Tilde(self):
            return self.getToken(NetlistParser.Tilde, 0)

        def Not(self):
            return self.getToken(NetlistParser.Not, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = NetlistParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 12437) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(NetlistParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(NetlistParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(NetlistParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(NetlistParser.DigitSequence, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)




    def castExpression(self):

        localctx = NetlistParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 329
                    self.match(NetlistParser.T__1)


                self.state = 332
                self.match(NetlistParser.LeftParen)
                self.state = 333
                self.typeName()
                self.state = 334
                self.match(NetlistParser.RightParen)
                self.state = 335
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 338
                self.match(NetlistParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Star)
            else:
                return self.getToken(NetlistParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Div)
            else:
                return self.getToken(NetlistParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Mod)
            else:
                return self.getToken(NetlistParser.Mod, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = NetlistParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.castExpression()
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0):
                self.state = 342
                _la = self._input.LA(1)
                if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 343
                self.castExpression()
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Plus)
            else:
                return self.getToken(NetlistParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Minus)
            else:
                return self.getToken(NetlistParser.Minus, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = NetlistParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.multiplicativeExpression()
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84 or _la==86:
                self.state = 350
                _la = self._input.LA(1)
                if not(_la==84 or _la==86):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 351
                self.multiplicativeExpression()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.LeftShift)
            else:
                return self.getToken(NetlistParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.RightShift)
            else:
                return self.getToken(NetlistParser.RightShift, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftExpression" ):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)




    def shiftExpression(self):

        localctx = NetlistParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.additiveExpression()
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82 or _la==83:
                self.state = 358
                _la = self._input.LA(1)
                if not(_la==82 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 359
                self.additiveExpression()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Less)
            else:
                return self.getToken(NetlistParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Greater)
            else:
                return self.getToken(NetlistParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.LessEqual)
            else:
                return self.getToken(NetlistParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.GreaterEqual)
            else:
                return self.getToken(NetlistParser.GreaterEqual, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = NetlistParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.shiftExpression()
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0):
                self.state = 366
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 367
                self.shiftExpression()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Equal)
            else:
                return self.getToken(NetlistParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.NotEqual)
            else:
                return self.getToken(NetlistParser.NotEqual, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalityExpression(self):

        localctx = NetlistParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.relationalExpression()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113 or _la==114:
                self.state = 374
                _la = self._input.LA(1)
                if not(_la==113 or _la==114):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 375
                self.relationalExpression()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.And)
            else:
                return self.getToken(NetlistParser.And, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpression" ):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def andExpression(self):

        localctx = NetlistParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.equalityExpression()
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==91:
                self.state = 382
                self.match(NetlistParser.And)
                self.state = 383
                self.equalityExpression()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Caret)
            else:
                return self.getToken(NetlistParser.Caret, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveOrExpression" ):
                return visitor.visitExclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def exclusiveOrExpression(self):

        localctx = NetlistParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.andExpression()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 390
                self.match(NetlistParser.Caret)
                self.state = 391
                self.andExpression()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Or)
            else:
                return self.getToken(NetlistParser.Or, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveOrExpression" ):
                return visitor.visitInclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def inclusiveOrExpression(self):

        localctx = NetlistParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.exclusiveOrExpression()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92:
                self.state = 398
                self.match(NetlistParser.Or)
                self.state = 399
                self.exclusiveOrExpression()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.AndAnd)
            else:
                return self.getToken(NetlistParser.AndAnd, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndExpression(self):

        localctx = NetlistParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.inclusiveOrExpression()
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 406
                self.match(NetlistParser.AndAnd)
                self.state = 407
                self.inclusiveOrExpression()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.OrOr)
            else:
                return self.getToken(NetlistParser.OrOr, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrExpression(self):

        localctx = NetlistParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.logicalAndExpression()
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 414
                self.match(NetlistParser.OrOr)
                self.state = 415
                self.logicalAndExpression()
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(NetlistParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(NetlistParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(NetlistParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(NetlistParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = NetlistParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.logicalOrExpression()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 422
                self.match(NetlistParser.Question)
                self.state = 423
                self.expression()
                self.state = 424
                self.match(NetlistParser.Colon)
                self.state = 425
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(NetlistParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(NetlistParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(NetlistParser.DigitSequence, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExpression(self):

        localctx = NetlistParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignmentExpression)
        try:
            self.state = 435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.unaryExpression()
                self.state = 431
                self.assignmentOperator()
                self.state = 432
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.match(NetlistParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(NetlistParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(NetlistParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(NetlistParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(NetlistParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(NetlistParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(NetlistParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(NetlistParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(NetlistParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(NetlistParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(NetlistParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(NetlistParser.OrAssign, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = NetlistParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = NetlistParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.assignmentExpression()
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101:
                self.state = 440
                self.match(NetlistParser.Comma)
                self.state = 441
                self.assignmentExpression()
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = NetlistParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(NetlistParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(NetlistParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(NetlistParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(NetlistParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = NetlistParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 5, 6, 7, 8, 9, 10, 11, 18, 28, 31, 32, 36, 38, 39, 40, 44, 45, 46, 47, 48, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 64, 65, 66, 69, 71, 118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 449
                self.declarationSpecifiers()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 128000) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 70368752631809) != 0):
                    self.state = 450
                    self.initDeclaratorList()


                self.state = 453
                self.match(NetlistParser.Semi)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 455
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(NetlistParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers" ):
                return visitor.visitDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers(self):

        localctx = NetlistParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 458
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 461 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(NetlistParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers2" ):
                return visitor.visitDeclarationSpecifiers2(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers2(self):

        localctx = NetlistParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 463
                self.declarationSpecifier()
                self.state = 466 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 6876418088431259620) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014398509482151) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(NetlistParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifier" ):
                return visitor.visitDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifier(self):

        localctx = NetlistParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifier)
        try:
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 470
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 471
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 472
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(NetlistParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclaratorList" ):
                return visitor.visitInitDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def initDeclaratorList(self):

        localctx = NetlistParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.initDeclarator()
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101:
                self.state = 476
                self.match(NetlistParser.Comma)
                self.state = 477
                self.initDeclarator()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(NetlistParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(NetlistParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(NetlistParser.InitializerContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclarator" ):
                return visitor.visitInitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initDeclarator(self):

        localctx = NetlistParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.declarator()
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 484
                self.match(NetlistParser.Assign)
                self.state = 485
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(NetlistParser.Typedef, 0)

        def Extern(self):
            return self.getToken(NetlistParser.Extern, 0)

        def Static(self):
            return self.getToken(NetlistParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(NetlistParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(NetlistParser.Auto, 0)

        def Register(self):
            return self.getToken(NetlistParser.Register, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageClassSpecifier" ):
                return visitor.visitStorageClassSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageClassSpecifier(self):

        localctx = NetlistParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            _la = self._input.LA(1)
            if not(((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & 8796395538433) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(NetlistParser.Void, 0)

        def Char(self):
            return self.getToken(NetlistParser.Char, 0)

        def Short(self):
            return self.getToken(NetlistParser.Short, 0)

        def Int(self):
            return self.getToken(NetlistParser.Int, 0)

        def Long(self):
            return self.getToken(NetlistParser.Long, 0)

        def Float(self):
            return self.getToken(NetlistParser.Float, 0)

        def Double(self):
            return self.getToken(NetlistParser.Double, 0)

        def Signed(self):
            return self.getToken(NetlistParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(NetlistParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(NetlistParser.Bool, 0)

        def Complex(self):
            return self.getToken(NetlistParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(NetlistParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpecifier" ):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def typeSpecifier(self):

        localctx = NetlistParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_typeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.match(NetlistParser.Void)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.match(NetlistParser.Char)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 3)
                self.state = 492
                self.match(NetlistParser.Short)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 493
                self.match(NetlistParser.Int)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 494
                self.match(NetlistParser.Long)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 6)
                self.state = 495
                self.match(NetlistParser.Float)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 7)
                self.state = 496
                self.match(NetlistParser.Double)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 8)
                self.state = 497
                self.match(NetlistParser.Signed)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 9)
                self.state = 498
                self.match(NetlistParser.Unsigned)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 10)
                self.state = 499
                self.match(NetlistParser.Bool)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 11)
                self.state = 500
                self.match(NetlistParser.Complex)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 12)
                self.state = 501
                self.match(NetlistParser.T__4)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 13)
                self.state = 502
                self.match(NetlistParser.T__5)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 14)
                self.state = 503
                self.match(NetlistParser.T__6)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 15)
                self.state = 504
                self.match(NetlistParser.T__1)
                self.state = 505
                self.match(NetlistParser.LeftParen)
                self.state = 506
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 224) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 507
                self.match(NetlistParser.RightParen)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 16)
                self.state = 508
                self.atomicTypeSpecifier()
                pass
            elif token in [54, 57]:
                self.enterOuterAlt(localctx, 17)
                self.state = 509
                self.structOrUnionSpecifier()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 18)
                self.state = 510
                self.enumSpecifier()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 19)
                self.state = 511
                self.typedefName()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 20)
                self.state = 512
                self.match(NetlistParser.T__7)
                self.state = 513
                self.match(NetlistParser.LeftParen)
                self.state = 514
                self.constantExpression()
                self.state = 515
                self.match(NetlistParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(NetlistParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(NetlistParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(NetlistParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(NetlistParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnionSpecifier" ):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnionSpecifier(self):

        localctx = NetlistParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 519
                self.structOrUnion()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 520
                    self.match(NetlistParser.Identifier)


                self.state = 523
                self.match(NetlistParser.LeftBrace)
                self.state = 524
                self.structDeclarationList()
                self.state = 525
                self.match(NetlistParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.structOrUnion()
                self.state = 528
                self.match(NetlistParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(NetlistParser.Struct, 0)

        def Union(self):
            return self.getToken(NetlistParser.Union, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnion" ):
                return visitor.visitStructOrUnion(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnion(self):

        localctx = NetlistParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            _la = self._input.LA(1)
            if not(_la==54 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(NetlistParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarationList" ):
                return visitor.visitStructDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarationList(self):

        localctx = NetlistParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 534
                self.structDeclaration()
                self.state = 537 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2183508397012287972) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014398509482055) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(NetlistParser.SpecifierQualifierListContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(NetlistParser.StructDeclaratorListContext,0)


        def Semi(self):
            return self.getToken(NetlistParser.Semi, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(NetlistParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaration" ):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaration(self):

        localctx = NetlistParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclaration)
        try:
            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.specifierQualifierList()
                self.state = 540
                self.structDeclaratorList()
                self.state = 541
                self.match(NetlistParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.specifierQualifierList()
                self.state = 544
                self.match(NetlistParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 546
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(NetlistParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(NetlistParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifierQualifierList" ):
                return visitor.visitSpecifierQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def specifierQualifierList(self):

        localctx = NetlistParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 549
                self.typeSpecifier()
                pass

            elif la_ == 2:
                self.state = 550
                self.typeQualifier()
                pass


            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 553
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(NetlistParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaratorList" ):
                return visitor.visitStructDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaratorList(self):

        localctx = NetlistParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.structDeclarator()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101:
                self.state = 557
                self.match(NetlistParser.Comma)
                self.state = 558
                self.structDeclarator()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(NetlistParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(NetlistParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarator" ):
                return visitor.visitStructDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarator(self):

        localctx = NetlistParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 128000) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 70368752631809) != 0):
                    self.state = 565
                    self.declarator()


                self.state = 568
                self.match(NetlistParser.Colon)
                self.state = 569
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(NetlistParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(NetlistParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(NetlistParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(NetlistParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def Comma(self):
            return self.getToken(NetlistParser.Comma, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumSpecifier" ):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumSpecifier(self):

        localctx = NetlistParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.match(NetlistParser.Enum)
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 573
                    self.match(NetlistParser.Identifier)


                self.state = 576
                self.match(NetlistParser.LeftBrace)
                self.state = 577
                self.enumeratorList()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 578
                    self.match(NetlistParser.Comma)


                self.state = 581
                self.match(NetlistParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.match(NetlistParser.Enum)
                self.state = 584
                self.match(NetlistParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(NetlistParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorList" ):
                return visitor.visitEnumeratorList(self)
            else:
                return visitor.visitChildren(self)




    def enumeratorList(self):

        localctx = NetlistParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.enumerator()
            self.state = 592
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 588
                    self.match(NetlistParser.Comma)
                    self.state = 589
                    self.enumerator() 
                self.state = 594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(NetlistParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(NetlistParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = NetlistParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.enumerationConstant()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 596
                self.match(NetlistParser.Assign)
                self.state = 597
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerationConstant" ):
                return visitor.visitEnumerationConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumerationConstant(self):

        localctx = NetlistParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(NetlistParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(NetlistParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(NetlistParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicTypeSpecifier" ):
                return visitor.visitAtomicTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def atomicTypeSpecifier(self):

        localctx = NetlistParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(NetlistParser.Atomic)
            self.state = 603
            self.match(NetlistParser.LeftParen)
            self.state = 604
            self.typeName()
            self.state = 605
            self.match(NetlistParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(NetlistParser.Const, 0)

        def Restrict(self):
            return self.getToken(NetlistParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(NetlistParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(NetlistParser.Atomic, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifier" ):
                return visitor.visitTypeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifier(self):

        localctx = NetlistParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            _la = self._input.LA(1)
            if not(((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(NetlistParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(NetlistParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionSpecifier" ):
                return visitor.visitFunctionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionSpecifier(self):

        localctx = NetlistParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_functionSpecifier)
        try:
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.match(NetlistParser.Inline)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.match(NetlistParser.Noreturn)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 611
                self.match(NetlistParser.T__8)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 4)
                self.state = 612
                self.match(NetlistParser.T__9)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 613
                self.gccAttributeSpecifier()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 6)
                self.state = 614
                self.match(NetlistParser.T__10)
                self.state = 615
                self.match(NetlistParser.LeftParen)
                self.state = 616
                self.match(NetlistParser.Identifier)
                self.state = 617
                self.match(NetlistParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(NetlistParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(NetlistParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentSpecifier" ):
                return visitor.visitAlignmentSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentSpecifier(self):

        localctx = NetlistParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(NetlistParser.Alignas)
            self.state = 621
            self.match(NetlistParser.LeftParen)
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 622
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 623
                self.constantExpression()
                pass


            self.state = 626
            self.match(NetlistParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(NetlistParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(NetlistParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = NetlistParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88 or _la==95:
                self.state = 628
                self.pointer()


            self.state = 631
            self.directDeclarator(0)
            self.state = 635
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 632
                    self.gccDeclaratorExtension() 
                self.state = 637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(NetlistParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def Colon(self):
            return self.getToken(NetlistParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(NetlistParser.DigitSequence, 0)

        def vcSpecificModifer(self):
            return self.getTypedRuleContext(NetlistParser.VcSpecificModiferContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(NetlistParser.DirectDeclaratorContext,0)


        def LeftBracket(self):
            return self.getToken(NetlistParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(NetlistParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(NetlistParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(NetlistParser.Static, 0)

        def Star(self):
            return self.getToken(NetlistParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(NetlistParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(NetlistParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectDeclarator" ):
                return visitor.visitDirectDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NetlistParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 639
                self.match(NetlistParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 640
                self.match(NetlistParser.LeftParen)
                self.state = 641
                self.declarator()
                self.state = 642
                self.match(NetlistParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 644
                self.match(NetlistParser.Identifier)
                self.state = 645
                self.match(NetlistParser.Colon)
                self.state = 646
                self.match(NetlistParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 647
                self.vcSpecificModifer()
                self.state = 648
                self.match(NetlistParser.Identifier)
                pass

            elif la_ == 5:
                self.state = 650
                self.match(NetlistParser.LeftParen)
                self.state = 651
                self.vcSpecificModifer()
                self.state = 652
                self.declarator()
                self.state = 653
                self.match(NetlistParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 702
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 700
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                    if la_ == 1:
                        localctx = NetlistParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 657
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 658
                        self.match(NetlistParser.LeftBracket)
                        self.state = 660
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0):
                            self.state = 659
                            self.typeQualifierList()


                        self.state = 663
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                            self.state = 662
                            self.assignmentExpression()


                        self.state = 665
                        self.match(NetlistParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = NetlistParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 666
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 667
                        self.match(NetlistParser.LeftBracket)
                        self.state = 668
                        self.match(NetlistParser.Static)
                        self.state = 670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0):
                            self.state = 669
                            self.typeQualifierList()


                        self.state = 672
                        self.assignmentExpression()
                        self.state = 673
                        self.match(NetlistParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = NetlistParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 675
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 676
                        self.match(NetlistParser.LeftBracket)
                        self.state = 677
                        self.typeQualifierList()
                        self.state = 678
                        self.match(NetlistParser.Static)
                        self.state = 679
                        self.assignmentExpression()
                        self.state = 680
                        self.match(NetlistParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = NetlistParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 682
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 683
                        self.match(NetlistParser.LeftBracket)
                        self.state = 685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0):
                            self.state = 684
                            self.typeQualifierList()


                        self.state = 687
                        self.match(NetlistParser.Star)
                        self.state = 688
                        self.match(NetlistParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = NetlistParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 689
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 690
                        self.match(NetlistParser.LeftParen)
                        self.state = 691
                        self.parameterTypeList()
                        self.state = 692
                        self.match(NetlistParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = NetlistParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 694
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 695
                        self.match(NetlistParser.LeftParen)
                        self.state = 697
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==118:
                            self.state = 696
                            self.identifierList()


                        self.state = 699
                        self.match(NetlistParser.RightParen)
                        pass

             
                self.state = 704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VcSpecificModiferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NetlistParser.RULE_vcSpecificModifer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVcSpecificModifer" ):
                listener.enterVcSpecificModifer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVcSpecificModifer" ):
                listener.exitVcSpecificModifer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVcSpecificModifer" ):
                return visitor.visitVcSpecificModifer(self)
            else:
                return visitor.visitChildren(self)




    def vcSpecificModifer(self):

        localctx = NetlistParser.VcSpecificModiferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_vcSpecificModifer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 128000) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.StringLiteral)
            else:
                return self.getToken(NetlistParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(NetlistParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccDeclaratorExtension" ):
                return visitor.visitGccDeclaratorExtension(self)
            else:
                return visitor.visitChildren(self)




    def gccDeclaratorExtension(self):

        localctx = NetlistParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.match(NetlistParser.T__16)
                self.state = 708
                self.match(NetlistParser.LeftParen)
                self.state = 710 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 709
                    self.match(NetlistParser.StringLiteral)
                    self.state = 712 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==121):
                        break

                self.state = 714
                self.match(NetlistParser.RightParen)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 715
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.LeftParen)
            else:
                return self.getToken(NetlistParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(NetlistParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.RightParen)
            else:
                return self.getToken(NetlistParser.RightParen, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeSpecifier" ):
                return visitor.visitGccAttributeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeSpecifier(self):

        localctx = NetlistParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(NetlistParser.T__17)
            self.state = 719
            self.match(NetlistParser.LeftParen)
            self.state = 720
            self.match(NetlistParser.LeftParen)
            self.state = 721
            self.gccAttributeList()
            self.state = 722
            self.match(NetlistParser.RightParen)
            self.state = 723
            self.match(NetlistParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(NetlistParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeList" ):
                return visitor.visitGccAttributeList(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeList(self):

        localctx = NetlistParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611685880988433663) != 0):
                self.state = 725
                self.gccAttribute()


            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101:
                self.state = 728
                self.match(NetlistParser.Comma)
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611685880988433663) != 0):
                    self.state = 729
                    self.gccAttribute()


                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(NetlistParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.LeftParen)
            else:
                return self.getToken(NetlistParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.RightParen)
            else:
                return self.getToken(NetlistParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(NetlistParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttribute" ):
                return visitor.visitGccAttribute(self)
            else:
                return visitor.visitChildren(self)




    def gccAttribute(self):

        localctx = NetlistParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 536870915) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 738
                self.match(NetlistParser.LeftParen)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                    self.state = 739
                    self.argumentExpressionList()


                self.state = 742
                self.match(NetlistParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.LeftParen)
            else:
                return self.getToken(NetlistParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(NetlistParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.RightParen)
            else:
                return self.getToken(NetlistParser.RightParen, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedParenthesesBlock" ):
                return visitor.visitNestedParenthesesBlock(self)
            else:
                return visitor.visitChildren(self)




    def nestedParenthesesBlock(self):

        localctx = NetlistParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611686018427387391) != 0):
                self.state = 750
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125]:
                    self.state = 745
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==72 or _la==73:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [72]:
                    self.state = 746
                    self.match(NetlistParser.LeftParen)
                    self.state = 747
                    self.nestedParenthesesBlock()
                    self.state = 748
                    self.match(NetlistParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Star)
            else:
                return self.getToken(NetlistParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Caret)
            else:
                return self.getToken(NetlistParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(NetlistParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointer" ):
                return visitor.visitPointer(self)
            else:
                return visitor.visitChildren(self)




    def pointer(self):

        localctx = NetlistParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 755
                _la = self._input.LA(1)
                if not(_la==88 or _la==95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0):
                    self.state = 756
                    self.typeQualifierList()


                self.state = 761 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==88 or _la==95):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(NetlistParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifierList" ):
                return visitor.visitTypeQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifierList(self):

        localctx = NetlistParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typeQualifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 763
                self.typeQualifier()
                self.state = 766 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(NetlistParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(NetlistParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(NetlistParser.Ellipsis, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterTypeList" ):
                return visitor.visitParameterTypeList(self)
            else:
                return visitor.visitChildren(self)




    def parameterTypeList(self):

        localctx = NetlistParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.parameterList()
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 769
                self.match(NetlistParser.Comma)
                self.state = 770
                self.match(NetlistParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(NetlistParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = NetlistParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.parameterDeclaration()
            self.state = 778
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 774
                    self.match(NetlistParser.Comma)
                    self.state = 775
                    self.parameterDeclaration() 
                self.state = 780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(NetlistParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(NetlistParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(NetlistParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(NetlistParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclaration" ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = NetlistParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.declarationSpecifiers()
                self.state = 782
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.declarationSpecifiers2()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 8454149) != 0):
                    self.state = 785
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Identifier)
            else:
                return self.getToken(NetlistParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = NetlistParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(NetlistParser.Identifier)
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101:
                self.state = 791
                self.match(NetlistParser.Comma)
                self.state = 792
                self.match(NetlistParser.Identifier)
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(NetlistParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(NetlistParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = NetlistParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.specifierQualifierList()
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 8454149) != 0):
                self.state = 799
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(NetlistParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(NetlistParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractDeclarator" ):
                return visitor.visitAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractDeclarator(self):

        localctx = NetlistParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88 or _la==95:
                    self.state = 803
                    self.pointer()


                self.state = 806
                self.directAbstractDeclarator(0)
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17 or _la==18:
                    self.state = 807
                    self.gccDeclaratorExtension()
                    self.state = 812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(NetlistParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(NetlistParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(NetlistParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(NetlistParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(NetlistParser.Static, 0)

        def Star(self):
            return self.getToken(NetlistParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(NetlistParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(NetlistParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectAbstractDeclarator" ):
                return visitor.visitDirectAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NetlistParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 816
                self.match(NetlistParser.LeftParen)
                self.state = 817
                self.abstractDeclarator()
                self.state = 818
                self.match(NetlistParser.RightParen)
                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 819
                        self.gccDeclaratorExtension() 
                    self.state = 824
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass

            elif la_ == 2:
                self.state = 825
                self.match(NetlistParser.LeftBracket)
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0):
                    self.state = 826
                    self.typeQualifierList()


                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                    self.state = 829
                    self.assignmentExpression()


                self.state = 832
                self.match(NetlistParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 833
                self.match(NetlistParser.LeftBracket)
                self.state = 834
                self.match(NetlistParser.Static)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0):
                    self.state = 835
                    self.typeQualifierList()


                self.state = 838
                self.assignmentExpression()
                self.state = 839
                self.match(NetlistParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 841
                self.match(NetlistParser.LeftBracket)
                self.state = 842
                self.typeQualifierList()
                self.state = 843
                self.match(NetlistParser.Static)
                self.state = 844
                self.assignmentExpression()
                self.state = 845
                self.match(NetlistParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 847
                self.match(NetlistParser.LeftBracket)
                self.state = 848
                self.match(NetlistParser.Star)
                self.state = 849
                self.match(NetlistParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 850
                self.match(NetlistParser.LeftParen)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6876418088431259620) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014398509482151) != 0):
                    self.state = 851
                    self.parameterTypeList()


                self.state = 854
                self.match(NetlistParser.RightParen)
                self.state = 858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 855
                        self.gccDeclaratorExtension() 
                    self.state = 860
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 906
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 904
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        localctx = NetlistParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 863
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 864
                        self.match(NetlistParser.LeftBracket)
                        self.state = 866
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0):
                            self.state = 865
                            self.typeQualifierList()


                        self.state = 869
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                            self.state = 868
                            self.assignmentExpression()


                        self.state = 871
                        self.match(NetlistParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = NetlistParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 872
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 873
                        self.match(NetlistParser.LeftBracket)
                        self.state = 874
                        self.match(NetlistParser.Static)
                        self.state = 876
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 4563468289) != 0):
                            self.state = 875
                            self.typeQualifierList()


                        self.state = 878
                        self.assignmentExpression()
                        self.state = 879
                        self.match(NetlistParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = NetlistParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 881
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 882
                        self.match(NetlistParser.LeftBracket)
                        self.state = 883
                        self.typeQualifierList()
                        self.state = 884
                        self.match(NetlistParser.Static)
                        self.state = 885
                        self.assignmentExpression()
                        self.state = 886
                        self.match(NetlistParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = NetlistParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 888
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 889
                        self.match(NetlistParser.LeftBracket)
                        self.state = 890
                        self.match(NetlistParser.Star)
                        self.state = 891
                        self.match(NetlistParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = NetlistParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 892
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 893
                        self.match(NetlistParser.LeftParen)
                        self.state = 895
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6876418088431259620) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014398509482151) != 0):
                            self.state = 894
                            self.parameterTypeList()


                        self.state = 897
                        self.match(NetlistParser.RightParen)
                        self.state = 901
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 898
                                self.gccDeclaratorExtension() 
                            self.state = 903
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                        pass

             
                self.state = 908
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefName" ):
                return visitor.visitTypedefName(self)
            else:
                return visitor.visitChildren(self)




    def typedefName(self):

        localctx = NetlistParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(NetlistParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(NetlistParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(NetlistParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(NetlistParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(NetlistParser.Comma, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = NetlistParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 52, 63, 67, 72, 84, 85, 86, 87, 88, 91, 93, 96, 97, 118, 119, 120, 121]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.assignmentExpression()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.match(NetlistParser.LeftBrace)
                self.state = 913
                self.initializerList()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 914
                    self.match(NetlistParser.Comma)


                self.state = 917
                self.match(NetlistParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.InitializerContext)
            else:
                return self.getTypedRuleContext(NetlistParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.DesignationContext)
            else:
                return self.getTypedRuleContext(NetlistParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerList" ):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)




    def initializerList(self):

        localctx = NetlistParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74 or _la==116:
                self.state = 921
                self.designation()


            self.state = 924
            self.initializer()
            self.state = 932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 925
                    self.match(NetlistParser.Comma)
                    self.state = 927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74 or _la==116:
                        self.state = 926
                        self.designation()


                    self.state = 929
                    self.initializer() 
                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(NetlistParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(NetlistParser.Assign, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignation" ):
                return visitor.visitDesignation(self)
            else:
                return visitor.visitChildren(self)




    def designation(self):

        localctx = NetlistParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.designatorList()
            self.state = 936
            self.match(NetlistParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(NetlistParser.DesignatorContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignatorList" ):
                return visitor.visitDesignatorList(self)
            else:
                return visitor.visitChildren(self)




    def designatorList(self):

        localctx = NetlistParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 938
                self.designator()
                self.state = 941 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==74 or _la==116):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(NetlistParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(NetlistParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(NetlistParser.Dot, 0)

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = NetlistParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_designator)
        try:
            self.state = 949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.match(NetlistParser.LeftBracket)
                self.state = 944
                self.constantExpression()
                self.state = 945
                self.match(NetlistParser.RightBracket)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(NetlistParser.Dot)
                self.state = 948
                self.match(NetlistParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(NetlistParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(NetlistParser.Comma, 0)

        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def Semi(self):
            return self.getToken(NetlistParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.StringLiteral)
            else:
                return self.getToken(NetlistParser.StringLiteral, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticAssertDeclaration" ):
                return visitor.visitStaticAssertDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticAssertDeclaration(self):

        localctx = NetlistParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(NetlistParser.StaticAssert)
            self.state = 952
            self.match(NetlistParser.LeftParen)
            self.state = 953
            self.constantExpression()
            self.state = 954
            self.match(NetlistParser.Comma)
            self.state = 956 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 955
                self.match(NetlistParser.StringLiteral)
                self.state = 958 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==121):
                    break

            self.state = 960
            self.match(NetlistParser.RightParen)
            self.state = 961
            self.match(NetlistParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(NetlistParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(NetlistParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(NetlistParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(NetlistParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(NetlistParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(NetlistParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def Semi(self):
            return self.getToken(NetlistParser.Semi, 0)

        def Volatile(self):
            return self.getToken(NetlistParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Colon)
            else:
                return self.getToken(NetlistParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = NetlistParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 966
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 967
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 968
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 969
                _la = self._input.LA(1)
                if not(_la==17 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 970
                _la = self._input.LA(1)
                if not(_la==20 or _la==60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 971
                self.match(NetlistParser.LeftParen)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                    self.state = 972
                    self.logicalOrExpression()
                    self.state = 977
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==101:
                        self.state = 973
                        self.match(NetlistParser.Comma)
                        self.state = 974
                        self.logicalOrExpression()
                        self.state = 979
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==99:
                    self.state = 982
                    self.match(NetlistParser.Colon)
                    self.state = 991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                        self.state = 983
                        self.logicalOrExpression()
                        self.state = 988
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==101:
                            self.state = 984
                            self.match(NetlistParser.Comma)
                            self.state = 985
                            self.logicalOrExpression()
                            self.state = 990
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 998
                self.match(NetlistParser.RightParen)
                self.state = 999
                self.match(NetlistParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def Colon(self):
            return self.getToken(NetlistParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(NetlistParser.StatementContext,0)


        def Case(self):
            return self.getToken(NetlistParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(NetlistParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(NetlistParser.Default, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStatement" ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = NetlistParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_labeledStatement)
        try:
            self.state = 1013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.match(NetlistParser.Identifier)
                self.state = 1003
                self.match(NetlistParser.Colon)
                self.state = 1004
                self.statement()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.match(NetlistParser.Case)
                self.state = 1006
                self.constantExpression()
                self.state = 1007
                self.match(NetlistParser.Colon)
                self.state = 1008
                self.statement()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1010
                self.match(NetlistParser.Default)
                self.state = 1011
                self.match(NetlistParser.Colon)
                self.state = 1012
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(NetlistParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(NetlistParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(NetlistParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = NetlistParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(NetlistParser.LeftBrace)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -137706467332) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 270216059950207471) != 0):
                self.state = 1016
                self.blockItemList()


            self.state = 1019
            self.match(NetlistParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(NetlistParser.BlockItemContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItemList" ):
                return visitor.visitBlockItemList(self)
            else:
                return visitor.visitChildren(self)




    def blockItemList(self):

        localctx = NetlistParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1021
                self.blockItem()
                self.state = 1024 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -137706467332) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 270216059950207471) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(NetlistParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(NetlistParser.DeclarationContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItem" ):
                return visitor.visitBlockItem(self)
            else:
                return visitor.visitChildren(self)




    def blockItem(self):

        localctx = NetlistParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_blockItem)
        try:
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1026
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(NetlistParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(NetlistParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = NetlistParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                self.state = 1030
                self.expression()


            self.state = 1033
            self.match(NetlistParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(NetlistParser.If, 0)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(NetlistParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.StatementContext)
            else:
                return self.getTypedRuleContext(NetlistParser.StatementContext,i)


        def Else(self):
            return self.getToken(NetlistParser.Else, 0)

        def Switch(self):
            return self.getToken(NetlistParser.Switch, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionStatement" ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = NetlistParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_selectionStatement)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.match(NetlistParser.If)
                self.state = 1036
                self.match(NetlistParser.LeftParen)
                self.state = 1037
                self.expression()
                self.state = 1038
                self.match(NetlistParser.RightParen)
                self.state = 1039
                self.statement()
                self.state = 1042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1040
                    self.match(NetlistParser.Else)
                    self.state = 1041
                    self.statement()


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.match(NetlistParser.Switch)
                self.state = 1045
                self.match(NetlistParser.LeftParen)
                self.state = 1046
                self.expression()
                self.state = 1047
                self.match(NetlistParser.RightParen)
                self.state = 1048
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(NetlistParser.While, 0)

        def LeftParen(self):
            return self.getToken(NetlistParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(NetlistParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(NetlistParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(NetlistParser.StatementContext,0)


        def Do(self):
            return self.getToken(NetlistParser.Do, 0)

        def Semi(self):
            return self.getToken(NetlistParser.Semi, 0)

        def For(self):
            return self.getToken(NetlistParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(NetlistParser.ForConditionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationStatement" ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = NetlistParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_iterationStatement)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.match(NetlistParser.While)
                self.state = 1053
                self.match(NetlistParser.LeftParen)
                self.state = 1054
                self.expression()
                self.state = 1055
                self.match(NetlistParser.RightParen)
                self.state = 1056
                self.statement()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.match(NetlistParser.Do)
                self.state = 1059
                self.statement()
                self.state = 1060
                self.match(NetlistParser.While)
                self.state = 1061
                self.match(NetlistParser.LeftParen)
                self.state = 1062
                self.expression()
                self.state = 1063
                self.match(NetlistParser.RightParen)
                self.state = 1064
                self.match(NetlistParser.Semi)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1066
                self.match(NetlistParser.For)
                self.state = 1067
                self.match(NetlistParser.LeftParen)
                self.state = 1068
                self.forCondition()
                self.state = 1069
                self.match(NetlistParser.RightParen)
                self.state = 1070
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Semi)
            else:
                return self.getToken(NetlistParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(NetlistParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(NetlistParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForCondition" ):
                return visitor.visitForCondition(self)
            else:
                return visitor.visitChildren(self)




    def forCondition(self):

        localctx = NetlistParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1074
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                    self.state = 1075
                    self.expression()


                pass


            self.state = 1080
            self.match(NetlistParser.Semi)
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                self.state = 1081
                self.forExpression()


            self.state = 1084
            self.match(NetlistParser.Semi)
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                self.state = 1085
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(NetlistParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(NetlistParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForDeclaration" ):
                return visitor.visitForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forDeclaration(self):

        localctx = NetlistParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.declarationSpecifiers()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 128000) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 70368752631809) != 0):
                self.state = 1089
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(NetlistParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NetlistParser.Comma)
            else:
                return self.getToken(NetlistParser.Comma, i)

        def getRuleIndex(self):
            return NetlistParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)




    def forExpression(self):

        localctx = NetlistParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.assignmentExpression()
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==101:
                self.state = 1093
                self.match(NetlistParser.Comma)
                self.state = 1094
                self.assignmentExpression()
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(NetlistParser.Semi, 0)

        def Goto(self):
            return self.getToken(NetlistParser.Goto, 0)

        def Identifier(self):
            return self.getToken(NetlistParser.Identifier, 0)

        def Continue(self):
            return self.getToken(NetlistParser.Continue, 0)

        def Break(self):
            return self.getToken(NetlistParser.Break, 0)

        def Return(self):
            return self.getToken(NetlistParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(NetlistParser.UnaryExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(NetlistParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpStatement" ):
                return visitor.visitJumpStatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpStatement(self):

        localctx = NetlistParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1100
                self.match(NetlistParser.Goto)
                self.state = 1101
                self.match(NetlistParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1102
                self.match(NetlistParser.Continue)
                pass

            elif la_ == 3:
                self.state = 1103
                self.match(NetlistParser.Break)
                pass

            elif la_ == 4:
                self.state = 1104
                self.match(NetlistParser.Return)
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9218868437227405284) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 33776998903840801) != 0):
                    self.state = 1105
                    self.expression()


                pass

            elif la_ == 5:
                self.state = 1108
                self.match(NetlistParser.Goto)
                self.state = 1109
                self.unaryExpression()
                pass


            self.state = 1112
            self.match(NetlistParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(NetlistParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(NetlistParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = NetlistParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6876418088431386596) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014469393220071) != 0):
                self.state = 1114
                self.translationUnit()


            self.state = 1117
            self.match(NetlistParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(NetlistParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationUnit" ):
                return visitor.visitTranslationUnit(self)
            else:
                return visitor.visitChildren(self)




    def translationUnit(self):

        localctx = NetlistParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1119
                self.externalDeclaration()
                self.state = 1122 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 6876418088431386596) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014469393220071) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(NetlistParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(NetlistParser.DeclarationContext,0)


        def Semi(self):
            return self.getToken(NetlistParser.Semi, 0)

        def getRuleIndex(self):
            return NetlistParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDeclaration" ):
                return visitor.visitExternalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externalDeclaration(self):

        localctx = NetlistParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_externalDeclaration)
        try:
            self.state = 1127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1124
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1125
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1126
                self.match(NetlistParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(NetlistParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(NetlistParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(NetlistParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(NetlistParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return NetlistParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = NetlistParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1129
                self.declarationSpecifiers()


            self.state = 1132
            self.declarator()
            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6876418088431259620) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014398509482215) != 0):
                self.state = 1133
                self.declarationList()


            self.state = 1136
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NetlistParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(NetlistParser.DeclarationContext,i)


        def getRuleIndex(self):
            return NetlistParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationList" ):
                return visitor.visitDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def declarationList(self):

        localctx = NetlistParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1138
                self.declaration()
                self.state = 1141 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 6876418088431259620) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014398509482215) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.directDeclarator_sempred
        self._predicates[66] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




